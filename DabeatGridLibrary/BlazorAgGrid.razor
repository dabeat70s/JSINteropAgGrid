@typeparam TRow
@inject IJSRuntime JsRtime
@implements IDisposable
@implements IBlazorAgGrid
<div id="myGrid" @ref="_gridRef" class="ag-theme-balham-dark ag-grid"></div>
<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>
<div>hello world</div>


@code{
    private ElementReference _gridRef;
    private string _componentId = Guid.NewGuid().ToString();
    private bool _inSelectionChangedEvent;

    [Parameter]
    public IEnumerable<TRow> RowData { get; set; }

    [Parameter]
    public EventCallback<TRow> OnSelectionChanged { get; set; }

    [Parameter]
    public bool AutoGenerateColumns { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public IList<ColumnDefinition> ColumnDefs { get; } = new List<ColumnDefinition>();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AutoGenerateColumns)
            {
                foreach (var propertyInfo in typeof(TRow).GetProperties())
                {
                    ColumnDefs.Add(new ColumnDefinition
                    {
                        HeaderName = propertyInfo.Name,
                        Field = propertyInfo.Name,
                        Sortable = true,
                        Filter = true
                    });
                }
            }



            await JsRtime.InvokeVoidAsync("ag_Grid.initialize",
            _componentId,_gridRef, DotNetObjectReference.Create(this));
        }
        await JsRtime.InvokeVoidAsync("ag_Grid.setRows",
            _componentId,RowData);
        await JsRtime.InvokeVoidAsync("ag_Grid.setColumnDefs",
             _componentId, ColumnDefs);
    }

    protected override bool ShouldRender()
    {
        //return base.ShouldRender();
        return !_inSelectionChangedEvent;
    }


    [JSInvokable]
    public async Task RaiseSelectionChangedAsync(TRow row)
    {
        try
        {
            _inSelectionChangedEvent = true;
            if (OnSelectionChanged.HasDelegate)
            {
                await OnSelectionChanged.InvokeAsync(row);
            }
        }
        finally
        {
            _inSelectionChangedEvent = false;
        }
    }

    public async void Dispose()
    {
        try
        {
            await JsRtime.InvokeVoidAsync("ag_Grid.dispose", _componentId);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            Console.WriteLine(ex);
        }
    }

}


